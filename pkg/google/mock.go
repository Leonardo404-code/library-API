// Code generated by mockery v2.38.0. DO NOT EDIT.

package google

import (
	context "context"

	library "library-api/pkg/library"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"
)

// Mock is an autogenerated mock type for the Google type
type Mock struct {
	mock.Mock
}

// DeleteFromBucket provides a mock function with given fields: ctx, objectTitle
func (_m *Mock) DeleteFromBucket(ctx context.Context, objectTitle string) error {
	ret := _m.Called(ctx, objectTitle)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFromBucket")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, objectTitle)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DownloadBook provides a mock function with given fields: ctx, objectTitle
func (_m *Mock) DownloadBook(ctx context.Context, objectTitle string) error {
	ret := _m.Called(ctx, objectTitle)

	if len(ret) == 0 {
		panic("no return value specified for DownloadBook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, objectTitle)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Upload provides a mock function with given fields: ctx, bookInfo, bookFile
func (_m *Mock) Upload(ctx context.Context, bookInfo *library.Book, bookFile multipart.File) error {
	ret := _m.Called(ctx, bookInfo, bookFile)

	if len(ret) == 0 {
		panic("no return value specified for Upload")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *library.Book, multipart.File) error); ok {
		r0 = rf(ctx, bookInfo, bookFile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMock creates a new instance of Mock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMock(t interface {
	mock.TestingT
	Cleanup(func())
},
) *Mock {
	mock := &Mock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
